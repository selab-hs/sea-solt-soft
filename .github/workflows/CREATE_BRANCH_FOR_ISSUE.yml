# 워크플로우의 이름을 정의합니다. GitHub Actions UI에 표시됩니다.
name: Create Branch For Issue

# 워크플로우가 GitHub 리소스에 접근할 수 있는 권한을 설정합니다.
permissions:
  issues: write # 이슈를 읽고 쓸 수 있는 권한 (예: 댓글 작성, 이슈 닫기)
  contents: write # 저장소의 내용을 읽고 쓸 수 있는 권한 (예: 브랜치 생성)

# 워크플로우가 언제 실행될지 정의합니다.
on:
  issues:
    # 이슈 이벤트 중 'assigned' (이슈가 담당자에게 할당될 때) 유형에서 워크플로우를 트리거합니다.
    types: [ assigned ]
  pull_request:
    # Pull Request 이벤트 중 'closed' (PR이 닫힐 때) 유형에서 워크플로우를 트리거합니다.
    types: [ closed ]

# 워크플로우에서 실행될 작업(jobs)을 정의합니다.
jobs:
  # 'create_issue_branch_job'이라는 작업의 정의입니다.
  create_issue_branch_job:
    # 이 작업이 실행될 가상 환경을 지정합니다. 여기서는 최신 Ubuntu 환경을 사용합니다.
    runs-on: ubuntu-latest
    # 이 작업 내에서 실행될 단계(steps)들을 정의합니다.
    steps:
      # 첫 번째 단계: 'Create Branch For Issue' 액션을 사용합니다.
      - name: Create Branch For Issue                 # 단계의 이름을 정의합니다.
        id: create_branch_for_issue                   # 이 단계에 고유한 ID를 부여하여 다른 단계에서 이 단계의 출력을 참조할 수 있도록 합니다.
        uses: robvanderleek/create-issue-branch@main  # 사용할 GitHub 액션을 지정합니다.
        # 'robvanderleek/create-issue-branch' 저장소의 'main' 브랜치에 있는 액션을 사용합니다.
        env:
          # 액션이 GitHub API와 상호작용할 때 필요한 토큰을 환경 변수로 설정합니다.
          # ${{ secrets.GITHUB_TOKEN }}은 GitHub Actions에서 자동으로 제공하는 기본 토큰입니다.
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      # 두 번째 단계: 이전 단계에서 생성된 브랜치 이름을 출력합니다.
      - name: Echo branch name # 단계의 이름을 정의합니다.
        run: echo ${{ steps.create_branch_for_issue.outputs.branchName }} # 'run' 키워드는 명령줄 명령을 실행합니다.
        # 여기서는 'create_branch_for_issue' 단계의 'branchName' 출력을 사용합니다.